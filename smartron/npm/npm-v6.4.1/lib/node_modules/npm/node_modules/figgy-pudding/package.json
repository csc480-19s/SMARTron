{
  "_from": "figgy-pudding@latest",
  "_id": "figgy-pudding@3.4.1",
  "_inBundle": false,
  "_integrity": "sha512-j1SAT641cerGuOvoSBoaE9LbSzh1N/E5ufk9oMpOKuyK8MyW3sGg4rh+4qhLmVTEAzipO5XTHYT4gjb6JYLE8g==",
  "_location": "/npm/figgy-pudding",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "figgy-pudding",
    "fetchSpec": "latest",
    "name": "figgy-pudding",
    "raw": "figgy-pudding@latest",
    "rawSpec": "latest",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/npm",
    "/npm/cacache",
    "/npm/libnpmhook",
    "/npm/libnpmhook/npm-registry-fetch"
  ],
  "_resolved": "https://registry.npmjs.org/figgy-pudding/-/figgy-pudding-3.4.1.tgz",
  "_shasum": "af66da1991fa2f94ff7f33b545a38ea4b3869696",
  "_shrinkwrap": null,
  "_spec": "figgy-pudding@latest",
  "_where": "/Users/zkat/Documents/code/work/npm",
  "author": {
    "email": "kzm@sykosomatic.org",
    "name": "Kat MarchÃ¡n"
  },
  "bugs": {
    "url": "https://github.com/zkat/figgy-pudding/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Delicious, festive, cascading config/opts definitions",
  "devDependencies": {
    "standard": "^11.0.1",
    "standard-version": "^4.4.0",
    "tap": "^12.0.1",
    "weallbehave": "^1.2.0",
    "weallcontribute": "^1.0.8"
  },
  "files": [
    "*.js",
    "lib"
  ],
  "homepage": "https://github.com/zkat/figgy-pudding#readme",
  "keywords": [
    "config",
    "options",
    "yummy"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "figgy-pudding",
  "optionalDependencies": {},
  "readme": "# figgy-pudding [![npm version](https://img.shields.io/npm/v/figgy-pudding.svg)](https://npm.im/figgy-pudding) [![license](https://img.shields.io/npm/l/figgy-pudding.svg)](https://npm.im/figgy-pudding) [![Travis](https://img.shields.io/travis/zkat/figgy-pudding.svg)](https://travis-ci.org/zkat/figgy-pudding) [![AppVeyor](https://ci.appveyor.com/api/projects/status/github/zkat/figgy-pudding?svg=true)](https://ci.appveyor.com/project/zkat/figgy-pudding) [![Coverage Status](https://coveralls.io/repos/github/zkat/figgy-pudding/badge.svg?branch=latest)](https://coveralls.io/github/zkat/figgy-pudding?branch=latest)\n\n# Death to the God Object! Now Bring Us Some Figgy Pudding!\n\n[`figgy-pudding`](https://github.com/zkat/figgy-pudding) is a simple JavaScript library for managing and composing cascading options objects -- hiding what needs to be hidden from each layer, without having to do a lot of manual munging and passing of options.\n\n## Install\n\n`$ npm install figgy-pudding`\n\n## Table of Contents\n\n* [Example](#example)\n* [Features](#features)\n* [API](#api)\n  * [`figgyPudding(spec)`](#figgy-pudding)\n  * [`Opts(values)`](#opts)\n    * [`opts.get()`](#opts-get)\n    * [`opts.concat()`](#opts-concat)\n\n### Example\n\n```javascript\nconst puddin = require('figgyPudding')\n\nconst RequestOpts = puddin({\n  follow: {\n    default: true\n  },\n  streaming: {\n    default: false\n  },\n  log: {\n    default: require('npmlog')\n  }\n})\n\nconst MyAppOpts = puddin({\n  log: {\n    default: require('npmlog')\n  },\n  cache: {\n    default: './cache'\n  }\n})\n\nfunction start (opts) {\n  opts = MyAppOpts(opts)\n  initCache(opts.get('cache'))\n  opts.get('streaming') // => undefined\n  reqStuff('https://npm.im/figgy-pudding', opts)\n}\n\nfunction reqStuff (uri, opts) {\n  opts = RequestOpts(opts)\n  require('request').get(uri, opts) // can't see `cache`\n}\n```\n\n### Features\n\n* Hide options from layer that didn't ask for it\n* Shared multi-layer options\n\n### API\n\n#### <a name=\"figgy-pudding\"></a> `> figgyPudding({ key: { default: val } | String }, [opts])`\n\nDefines an Options constructor that can be used to collect only the needed\noptions.\n\nAn optional `default` property for specs can be used to specify default values\nif nothing was passed in.\n\nIf the value for a spec is a string, it will be treated as an alias to that\nother key.\n\n##### Example\n\n```javascript\nconst MyAppOpts = figgyPudding({\n  lg: 'log',\n  log: {\n    default: () => require('npmlog')\n  },\n  cache: {}\n})\n```\n\n#### <a name=\"opts\"></a> `> Opts(...providers)`\n\nInstantiates an options object defined by `figgyPudding()`, which uses\n`providers`, in order, to find requested properties.\n\nEach provider can be either a plain object, a `Map`-like object (that is, one\nwith a `.get()` method) or another figgyPudding `Opts` object.\n\nWhen nesting `Opts` objects, their properties will not become available to the\nnew object, but any further nested `Opts` that reference that property _will_ be\nable to read from their grandparent, as long as they define that key. Default\nvalues for nested `Opts` parents will be used, if found.\n\n##### Example\n\n```javascript\nconst ReqOpts = figgyPudding({\n  follow: {}\n})\n\nconst opts = ReqOpts({\n  follow: true,\n  log: require('npmlog')\n})\n\nopts.get('follow') // => true\nopts.get('log') // => Error: ReqOpts does not define `log`\n\nconst MoreOpts = figgyPudding({\n  log: {}\n})\nMoreOpts(opts).get('log') // => npmlog object (passed in from original plain obj)\nMoreOpts(opts).get('follow') // => Error: MoreOpts does not define `follow`\n```\n\n#### <a name=\"opts-get\"></a> `> opts.get(key)`\n\nGets a value from the options object.\n\n##### Example\n\n```js\nconst opts = MyOpts(config)\nopts.get('foo') // value of `foo`\n```\n\n#### <a name=\"opts-concat\"></a> `> opts.concat(...moreProviders)`\n\nCreates a new opts object of the same type as `opts` with additional providers.\nProviders further to the right shadow providers to the left, with properties in\nthe original `opts` being shadows by the new providers.\n\n##### Example\n\n```js\nconst opts = MyOpts({x: 1})\nopts.get('x') // 1\nopts.concat({x: 2}).get('x') // 2\nopts.get('x') // 1 (original opts object left intact)\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zkat/figgy-pudding.git"
  },
  "scripts": {
    "postrelease": "npm publish && git push --follow-tags",
    "prerelease": "npm t",
    "pretest": "standard",
    "release": "standard-version -s",
    "test": "tap -J --100 --coverage test/*.js",
    "update-coc": "weallbehave -o . && git add CODE_OF_CONDUCT.md && git commit -m 'docs(coc): updated CODE_OF_CONDUCT.md'",
    "update-contrib": "weallcontribute -o . && git add CONTRIBUTING.md && git commit -m 'docs(contributing): updated CONTRIBUTING.md'"
  },
  "version": "3.4.1"
}
